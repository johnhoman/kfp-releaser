apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: is-palindrome-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-02-01T22:13:35.751118',
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"default": "", "name": "s",
      "optional": true, "type": "String"}], "name": "is_palindrome"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
spec:
  entrypoint: is-palindrome
  templates:
  - name: compare
    container:
      args: [--s, '{{inputs.parameters.s}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def compare(s):
            return "true" if s[0] == s[-1] else "false"

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                    str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Compare', description='')
        _parser.add_argument("--s", dest="s", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = compare(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: s}
    outputs:
      parameters:
      - name: compare-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: compare-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--s", {"inputValue": "s"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          compare(s):\n    return \"true\" if s[0] == s[-1] else \"false\"\n\ndef
          _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value,
          str):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          str.''.format(\n            str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Compare'',
          description='''')\n_parser.add_argument(\"--s\", dest=\"s\", type=str, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\",
          type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = compare(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "s", "type": "String"}], "name":
          "Compare", "outputs": [{"name": "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"s": "{{inputs.parameters.s}}"}'}
  - name: condition-2
    dag:
      tasks:
      - {name: print-op, template: print-op}
  - name: condition-3
    dag:
      tasks:
      - {name: print-op-2, template: print-op-2}
  - name: condition-4
    inputs:
      parameters:
      - {name: s}
    dag:
      tasks:
      - name: compare
        template: compare
        arguments:
          parameters:
          - {name: s, value: '{{inputs.parameters.s}}'}
      - name: condition-5
        template: condition-5
        when: '"{{tasks.compare.outputs.parameters.compare-Output}}" == "false"'
        dependencies: [compare]
      - name: condition-6
        template: condition-6
        when: '"{{tasks.compare.outputs.parameters.compare-Output}}" == "true"'
        dependencies: [compare]
        arguments:
          parameters:
          - {name: s, value: '{{inputs.parameters.s}}'}
  - name: condition-5
    dag:
      tasks:
      - {name: print-op-3, template: print-op-3}
  - name: condition-6
    inputs:
      parameters:
      - {name: s}
    dag:
      tasks:
      - name: graph-is-palindrome-1
        template: graph-is-palindrome-1
        dependencies: [trim]
        arguments:
          parameters:
          - {name: s, value: '{{tasks.trim.outputs.parameters.trim-Output}}'}
      - name: trim
        template: trim
        arguments:
          parameters:
          - {name: s, value: '{{inputs.parameters.s}}'}
  - name: graph-is-palindrome-1
    inputs:
      parameters:
      - {name: s}
    dag:
      tasks:
      - name: condition-2
        template: condition-2
        when: '"{{tasks.length.outputs.parameters.length-Output}}" == "1"'
        dependencies: [length]
      - name: condition-3
        template: condition-3
        when: '"{{tasks.length.outputs.parameters.length-Output}}" == "0"'
        dependencies: [length]
      - name: condition-4
        template: condition-4
        when: '{{tasks.length.outputs.parameters.length-Output}} > 1'
        dependencies: [length]
        arguments:
          parameters:
          - {name: s, value: '{{inputs.parameters.s}}'}
      - name: length
        template: length
        arguments:
          parameters:
          - {name: s, value: '{{inputs.parameters.s}}'}
  - name: is-palindrome
    inputs:
      parameters:
      - {name: s}
    dag:
      tasks:
      - name: graph-is-palindrome-1
        template: graph-is-palindrome-1
        arguments:
          parameters:
          - {name: s, value: '{{inputs.parameters.s}}'}
  - name: length
    container:
      args: [--s, '{{inputs.parameters.s}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def length(s):
            return len(s)

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(
                    str(int_value), str(type(int_value))))
            return str(int_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Length', description='')
        _parser.add_argument("--s", dest="s", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = length(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: s}
    outputs:
      parameters:
      - name: length-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: length-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--s", {"inputValue": "s"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          length(s):\n    return len(s)\n\ndef _serialize_int(int_value: int) -> str:\n    if
          isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value,
          int):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Length'',
          description='''')\n_parser.add_argument(\"--s\", dest=\"s\", type=str, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\",
          type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = length(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "s", "type": "String"}], "name":
          "Length", "outputs": [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"s": "{{inputs.parameters.s}}"}'}
  - name: print-op
    container:
      args:
      - --s
      - "true"
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_op(s):
            print(s)

        import argparse
        _parser = argparse.ArgumentParser(prog='Print op', description='')
        _parser.add_argument("--s", dest="s", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_op(**_parsed_args)
      image: python:3.7
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--s", {"inputValue": "s"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def print_op(s):\n    print(s)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Print
          op'', description='''')\n_parser.add_argument(\"--s\", dest=\"s\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_op(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "s"}], "name": "Print op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"s": "true"}'}
  - name: print-op-2
    container:
      args:
      - --s
      - "true"
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_op(s):
            print(s)

        import argparse
        _parser = argparse.ArgumentParser(prog='Print op', description='')
        _parser.add_argument("--s", dest="s", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_op(**_parsed_args)
      image: python:3.7
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--s", {"inputValue": "s"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def print_op(s):\n    print(s)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Print
          op'', description='''')\n_parser.add_argument(\"--s\", dest=\"s\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_op(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "s"}], "name": "Print op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"s": "true"}'}
  - name: print-op-3
    container:
      args:
      - --s
      - "false"
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_op(s):
            print(s)

        import argparse
        _parser = argparse.ArgumentParser(prog='Print op', description='')
        _parser.add_argument("--s", dest="s", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_op(**_parsed_args)
      image: python:3.7
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--s", {"inputValue": "s"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def print_op(s):\n    print(s)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Print
          op'', description='''')\n_parser.add_argument(\"--s\", dest=\"s\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_op(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "s"}], "name": "Print op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"s": "false"}'}
  - name: trim
    container:
      args: [--s, '{{inputs.parameters.s}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def trim(s):
            return s[1:-1]

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                    str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Trim', description='')
        _parser.add_argument("--s", dest="s", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = trim(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: s}
    outputs:
      parameters:
      - name: trim-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: trim-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--s", {"inputValue": "s"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          trim(s):\n    return s[1:-1]\n\ndef _serialize_str(str_value: str) -> str:\n    if
          not isinstance(str_value, str):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of str.''.format(\n            str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Trim'',
          description='''')\n_parser.add_argument(\"--s\", dest=\"s\", type=str, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\",
          type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = trim(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "s", "type": "String"}], "name":
          "Trim", "outputs": [{"name": "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"s": "{{inputs.parameters.s}}"}'}
  arguments:
    parameters:
    - {name: s, value: ''}
  serviceAccountName: pipeline-runner
